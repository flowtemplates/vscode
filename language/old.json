{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/refs/heads/master/tmlanguage.json",
  "scopeName": "source.ft",
  "name": "FT",
  "patterns": [
    { "include": "#comment-block" },
    { "include": "#statement-block" },
    { "include": "#expression-block" }
  ],
  "repository": {
    "comment-block": {
      "patterns": [
        {
          "begin": "{#",
          "end": "#}",
          "name": "comment.block.ft"
        }
      ]
    },
    "statement-block": {
      "patterns": [
        {
          "begin": "{%",
          "end": "%}",
          "name": "meta.block.statement.ft",
          "patterns": [
            { "include": "#keywords" },
            { "include": "#operators" },
            { "include": "#numbers" },
            { "include": "#strings" },
            { "include": "#braces" },
            { "include": "#boolean" },
            { "include": "#ternaries" },
            { "include": "#filters" }
          ]
        }
      ]
    },
    "expression-block": {
      "patterns": [
        {
          "begin": "{{",
          "end": "}}",
          "name": "meta.block.expression.ft",
          "patterns": [
            { "include": "#operators" },
            { "include": "#numbers" },
            { "include": "#strings" },
            { "include": "#braces" },
            { "include": "#boolean" },
            { "include": "#ternaries" },
            { "include": "#filters" }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        { "include": "#conditional" },
        { "include": "#switch" },
        { "include": "#end" },
        { "include": "#genif" }
      ]
    },
    "switch": {
      "match": "\\b(switch|case|default)\\b",
      "name": "keyword.control.switch.ft"
    },
    "conditional": {
      "match": "\\b(if|else\\s*if|else)\\b",
      "name": "keyword.control.conditional.ft"
    },
    "end": {
      "match": "\\bend\\b",
      "name": "keyword.control.end.ft"
    },
    "genif": {
      "match": "\\bgenif\\b",
      "name": "keyword.control.genif.ft"
    },
    "filters": {
      "name": "meta.filter.ft",
      "patterns": [
        { "include": "#filters-call" },
        { "include": "#filters-operator" }
      ]
    },
    "filters-operator": {
      "name": "keyword.operator.filter.ft",
      "match": "->"
    },
    "filters-call": {
      "name": "entity.name.function.ft meta.function-call.ft meta.filter-call.ft",
      "match": "\\b(snake|camel|pascal|kebab|title|capitalize|upper|lower|length)\\b"
    },
    "ternaries": {
      "name": "keyword.operator.ternary.ft",
      "patterns": [
        { "include": "#ternaries-words" },
        { "include": "#ternaries-symbols" }
      ]
    },
    "ternaries-words": {
      "name": "keyword.operator.ternary.word.ft",
      "match": "\\b(do|else)\\b"
    },
    "ternaries-symbols": {
      "name": "keyword.operator.ternary.symbols.ft",
      "match": "[\\?\\:]"
    },
    "strings": {
      "patterns": [
        { "include": "#qstring-single" },
        { "include": "#qstring-double" }
      ]
    },
    "qstring-double": {
      "name": "string.quoted.double.ft",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.ft"
        }
      },
      "end": "(\")|((?:[^\\\\\\n])$)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.ft"
        },
        "2": {
          "name": "invalid.illegal.newline.ft"
        }
      }
    },
    "qstring-single": {
      "name": "string.quoted.single.ft",
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.ft"
        }
      },
      "end": "(\\')|((?:[^\\\\\\n])$)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.ft"
        },
        "2": {
          "name": "invalid.illegal.newline.ft"
        }
      }
    },
    "braces": {
      "name": "meta.brace.round.ft",
      "match": "[\\(\\)]"
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.integer.ft",
          "match": "(?<!\\.)\\b[-+]?\\d+\\b(?!\\.\\d)"
        },
        {
          "name": "constant.numeric.float.ft",
          "match": "\\b[+-]?\\d+\\.\\d+\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.logical.ft",
          "match": "(?<!\\w)(or|and|not|is)(?!\\w)"
        },
        {
          "name": "keyword.operator.symbols.ft",
          "match": "(\\|\\||&&|!|==|!=)"
        },
        {
          "name": "keyword.operator.arithmetic.ft",
          "match": "(\\+|-|\\*\\*?|\\/\\/|\\/|%|>=|<=|>|<)"
        }
      ]
    },
    "boolean": {
      "patterns": [
        { "name": "constant.language.boolean.true.ft", "match": "\\btrue\\b" },
        { "name": "constant.language.boolean.false.ft", "match": "\\bfalse\\b" }
      ]
    }
  }
}
