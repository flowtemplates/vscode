{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/refs/heads/master/tmlanguage.json",
  "scopeName": "source.ft",
  "name": "FT",
  "patterns": [
    { "include": "#comment-block" },
    { "include": "#expression-block" },
    { "include": "#statement-block" }
  ],
  "repository": {
    "comment-block": {
      "begin": "\\{#",
      "end": "#\\}",
      "beginCaptures": {
        "0": { "name": "punctuation.definition.comment.ft" }
      },
      "endCaptures": {
        "0": { "name": "punctuation.definition.comment.ft" }
      },
      "name": "comment.block.ft"
    },
    "expression-block": {
      "begin": "\\{\\{",
      "end": "\\}\\}",
      "name": "meta.expression-block.ft",
      "patterns": [{ "include": "#primitives" }]
    },
    "statement-block": {
      "begin": "\\{\\%",
      "end": "\\%\\}$",
      "name": "meta.statement-block.ft",
      "patterns": [
        {
          "match": "\\s*(if|else\\s+if|switch|case|genif)\\s+(.*)\\%\\}",
          "captures": {
            "1": {
              "name": "keyword.control.ft"
            },
            "2": {
              "name": "meta.statement.ft",
              "patterns": [{ "include": "#primitives" }]
            }
          }
        },
        {
          "match": "\\s*(end|default)\\s*(.*)\\%\\}",
          "captures": {
            "1": {
              "name": "keyword.control.ft"
            },
            "2": {
              "name": "invalid.illegal"
            }
          }
        }
      ]
    },
    "primitives": {
      "patterns": [
        { "include": "#numbers" },
        { "include": "#booleans" },
        { "include": "#strings" },
        { "include": "#ternaries" },
        { "include": "#operators" },
        { "include": "#filters" },
        { "include": "#variables" }
      ]
    },
    "variables": {
      "match": "(?:if|else|genif|switch|case|default|end)|([_$[:alpha:]][_$[:alnum:]]*)",
      "captures": {
        "1": {
          "name": "meta.definition.variable.ft variable.other.constant.ft"
        }
      }
    },
    "numbers": {
      "match": "(\\d+(\\.)?\\d*)",
      "captures": {
        "1": {
          "name": "constant.numeric.decimal.ft"
        },
        "2": {
          "name": "meta.delimiter.decimal.period.ft"
        }
      }
    },
    "booleans": {
      "match": "\\b(?:(true)|(false))\\b",
      "captures": {
        "1": {
          "name": "constant.language.boolean.true.ft"
        },
        "2": {
          "name": "constant.language.boolean.false.ft"
        }
      }
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.ft",
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.ft"
            }
          },
          "end": "(\")|((?:[^\\\\\\n])$)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.ft"
            },
            "2": {
              "name": "invalid.illegal.newline.ft"
            }
          }
        },
        {
          "name": "string.quoted.single.ft",
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.ft"
            }
          },
          "end": "(\\')|((?:[^\\\\\\n])$)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.string.end.ft"
            },
            "2": {
              "name": "invalid.illegal.newline.ft"
            }
          }
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "match": "(\\+|\\*\\*|\\*|\\-(?!>)|\\/\\/|\\/|\\%)",
          "captures": {
            "1": {
              "name": "keyword.operator.arithmetic.ft"
            }
          }
        },
        {
          "patterns": [
            {
              "match": "\\s(or|and|is|not)\\s",
              "captures": {
                "1": {
                  "name": "meta.operator.logical.word.ft keyword.operator.logical.ft"
                }
              }
            },
            {
              "match": "(\\=\\=|\\!\\=|\\&\\&|\\|\\|)",
              "captures": {
                "1": {
                  "name": "meta.operator.logical.symbols.ft keyword.operator.logical.ft"
                }
              }
            }
          ]
        }
      ]
    },
    "ternaries": {
      "patterns": [
        {
          "match": "((\\?)|(\\:))",
          "captures": {
            "1": {
              "name": "keyword.operator.ternary.symbol.ft"
            },
            "2": {
              "name": "meta.operator.ternary-if.ft"
            },
            "3": {
              "name": "meta.operator.ternary-else.ft"
            }
          }
        },
        {
          "match": "\\s((do)|(else))\\s",
          "captures": {
            "1": {
              "name": "keyword.operator.ternary.word.ft"
            },
            "2": {
              "name": "meta.operator.ternary-if.ft"
            },
            "3": {
              "name": "meta.operator.ternary-else.ft"
            }
          }
        }
      ]
    },
    "filters": {
      "match": "(->)\\s*(\\b\\w+\\b)?",
      "captures": {
        "1": {
          "name": "keyword.operator.filter.ft"
        },
        "2": {
          "name": "entity.name.function.ft meta.function-call.ft"
        }
      }
    }
  }
}
